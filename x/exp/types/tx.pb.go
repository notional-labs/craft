// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: craft/exp/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/ibc-go/v4/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgMintAndAllocateExp struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	//string FromAdd
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// members defines the Dao members address.
	Member string `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *MsgMintAndAllocateExp) Reset()         { *m = MsgMintAndAllocateExp{} }
func (m *MsgMintAndAllocateExp) String() string { return proto.CompactTextString(m) }
func (*MsgMintAndAllocateExp) ProtoMessage()    {}
func (*MsgMintAndAllocateExp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{0}
}
func (m *MsgMintAndAllocateExp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintAndAllocateExp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintAndAllocateExp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintAndAllocateExp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintAndAllocateExp.Merge(m, src)
}
func (m *MsgMintAndAllocateExp) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintAndAllocateExp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintAndAllocateExp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintAndAllocateExp proto.InternalMessageInfo

func (m *MsgMintAndAllocateExp) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgMintAndAllocateExp) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgMintAndAllocateExp) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

type MsgMintAndAllocateExpResponse struct {
}

func (m *MsgMintAndAllocateExpResponse) Reset()         { *m = MsgMintAndAllocateExpResponse{} }
func (m *MsgMintAndAllocateExpResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintAndAllocateExpResponse) ProtoMessage()    {}
func (*MsgMintAndAllocateExpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{1}
}
func (m *MsgMintAndAllocateExpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintAndAllocateExpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintAndAllocateExpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintAndAllocateExpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintAndAllocateExpResponse.Merge(m, src)
}
func (m *MsgMintAndAllocateExpResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintAndAllocateExpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintAndAllocateExpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintAndAllocateExpResponse proto.InternalMessageInfo

// MsgBurnAndRemoveMember
type MsgBurnAndRemoveMember struct {
	// from_address defines the member who want exit Dao and get their money.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// metadata is any arbitrary metadata to attached.
	Metadata string `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgBurnAndRemoveMember) Reset()         { *m = MsgBurnAndRemoveMember{} }
func (m *MsgBurnAndRemoveMember) String() string { return proto.CompactTextString(m) }
func (*MsgBurnAndRemoveMember) ProtoMessage()    {}
func (*MsgBurnAndRemoveMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{2}
}
func (m *MsgBurnAndRemoveMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnAndRemoveMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnAndRemoveMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnAndRemoveMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnAndRemoveMember.Merge(m, src)
}
func (m *MsgBurnAndRemoveMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnAndRemoveMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnAndRemoveMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnAndRemoveMember proto.InternalMessageInfo

func (m *MsgBurnAndRemoveMember) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgBurnAndRemoveMember) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type MsgBurnAndRemoveMemberResponse struct {
}

func (m *MsgBurnAndRemoveMemberResponse) Reset()         { *m = MsgBurnAndRemoveMemberResponse{} }
func (m *MsgBurnAndRemoveMemberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnAndRemoveMemberResponse) ProtoMessage()    {}
func (*MsgBurnAndRemoveMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{3}
}
func (m *MsgBurnAndRemoveMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnAndRemoveMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnAndRemoveMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnAndRemoveMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnAndRemoveMemberResponse.Merge(m, src)
}
func (m *MsgBurnAndRemoveMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnAndRemoveMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnAndRemoveMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnAndRemoveMemberResponse proto.InternalMessageInfo

// MsgBurnAndRemoveMember
type MsgJoinDaoByNonIbcAsset struct {
	// join_address defines the member who want join Dao.
	JoinAddress string `protobuf:"bytes,1,opt,name=join_address,json=joinAddress,proto3" json:"join_address,omitempty"`
	// gov_address defines the gov chain address.
	GovAddress string `protobuf:"bytes,2,opt,name=gov_address,json=govAddress,proto3" json:"gov_address,omitempty"`
	// max_coin_mint is maximum exp can be mint.
	MaxToken int64 `protobuf:"varint,3,opt,name=max_token,json=maxToken,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Int" json:"max_token,omitempty"`
}

func (m *MsgJoinDaoByNonIbcAsset) Reset()         { *m = MsgJoinDaoByNonIbcAsset{} }
func (m *MsgJoinDaoByNonIbcAsset) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDaoByNonIbcAsset) ProtoMessage()    {}
func (*MsgJoinDaoByNonIbcAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{4}
}
func (m *MsgJoinDaoByNonIbcAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDaoByNonIbcAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDaoByNonIbcAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDaoByNonIbcAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDaoByNonIbcAsset.Merge(m, src)
}
func (m *MsgJoinDaoByNonIbcAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDaoByNonIbcAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDaoByNonIbcAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDaoByNonIbcAsset proto.InternalMessageInfo

func (m *MsgJoinDaoByNonIbcAsset) GetJoinAddress() string {
	if m != nil {
		return m.JoinAddress
	}
	return ""
}

func (m *MsgJoinDaoByNonIbcAsset) GetGovAddress() string {
	if m != nil {
		return m.GovAddress
	}
	return ""
}

func (m *MsgJoinDaoByNonIbcAsset) GetMaxToken() int64 {
	if m != nil {
		return m.MaxToken
	}
	return 0
}

type MsgJoinDaoByNonIbcAssetResponse struct {
}

func (m *MsgJoinDaoByNonIbcAssetResponse) Reset()         { *m = MsgJoinDaoByNonIbcAssetResponse{} }
func (m *MsgJoinDaoByNonIbcAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDaoByNonIbcAssetResponse) ProtoMessage()    {}
func (*MsgJoinDaoByNonIbcAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{5}
}
func (m *MsgJoinDaoByNonIbcAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDaoByNonIbcAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDaoByNonIbcAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDaoByNonIbcAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDaoByNonIbcAssetResponse.Merge(m, src)
}
func (m *MsgJoinDaoByNonIbcAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDaoByNonIbcAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDaoByNonIbcAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDaoByNonIbcAssetResponse proto.InternalMessageInfo

type MsgJoinDaoByIbcAsset struct {
	// join_address defines the member who want join Dao.
	JoinAddress string                                 `protobuf:"bytes,1,opt,name=join_address,json=joinAddress,proto3" json:"join_address,omitempty"`
	GovAddress  string                                 `protobuf:"bytes,2,opt,name=gov_address,json=govAddress,proto3" json:"gov_address,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"amount"`
}

func (m *MsgJoinDaoByIbcAsset) Reset()         { *m = MsgJoinDaoByIbcAsset{} }
func (m *MsgJoinDaoByIbcAsset) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDaoByIbcAsset) ProtoMessage()    {}
func (*MsgJoinDaoByIbcAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{6}
}
func (m *MsgJoinDaoByIbcAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDaoByIbcAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDaoByIbcAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDaoByIbcAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDaoByIbcAsset.Merge(m, src)
}
func (m *MsgJoinDaoByIbcAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDaoByIbcAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDaoByIbcAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDaoByIbcAsset proto.InternalMessageInfo

func (m *MsgJoinDaoByIbcAsset) GetJoinAddress() string {
	if m != nil {
		return m.JoinAddress
	}
	return ""
}

func (m *MsgJoinDaoByIbcAsset) GetGovAddress() string {
	if m != nil {
		return m.GovAddress
	}
	return ""
}

type MsgJoinDaoByIbcAssetResponse struct {
}

func (m *MsgJoinDaoByIbcAssetResponse) Reset()         { *m = MsgJoinDaoByIbcAssetResponse{} }
func (m *MsgJoinDaoByIbcAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDaoByIbcAssetResponse) ProtoMessage()    {}
func (*MsgJoinDaoByIbcAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{7}
}
func (m *MsgJoinDaoByIbcAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDaoByIbcAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDaoByIbcAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDaoByIbcAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDaoByIbcAssetResponse.Merge(m, src)
}
func (m *MsgJoinDaoByIbcAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDaoByIbcAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDaoByIbcAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDaoByIbcAssetResponse proto.InternalMessageInfo

type MsgFundExpPool struct {
	// from_address defines the member who want fund.
	FromAddress string                                   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgFundExpPool) Reset()         { *m = MsgFundExpPool{} }
func (m *MsgFundExpPool) String() string { return proto.CompactTextString(m) }
func (*MsgFundExpPool) ProtoMessage()    {}
func (*MsgFundExpPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{8}
}
func (m *MsgFundExpPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundExpPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundExpPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundExpPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundExpPool.Merge(m, src)
}
func (m *MsgFundExpPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundExpPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundExpPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundExpPool proto.InternalMessageInfo

func (m *MsgFundExpPool) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgFundExpPool) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type MsgFundExpPoolResponse struct {
}

func (m *MsgFundExpPoolResponse) Reset()         { *m = MsgFundExpPoolResponse{} }
func (m *MsgFundExpPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFundExpPoolResponse) ProtoMessage()    {}
func (*MsgFundExpPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{9}
}
func (m *MsgFundExpPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundExpPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundExpPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundExpPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundExpPoolResponse.Merge(m, src)
}
func (m *MsgFundExpPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundExpPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundExpPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundExpPoolResponse proto.InternalMessageInfo

type MsgSpendIbcAssetToExp struct {
	// from_address defines the member who want fund.
	FromAddress string                                   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types1.Height `protobuf:"bytes,3,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,4,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *MsgSpendIbcAssetToExp) Reset()         { *m = MsgSpendIbcAssetToExp{} }
func (m *MsgSpendIbcAssetToExp) String() string { return proto.CompactTextString(m) }
func (*MsgSpendIbcAssetToExp) ProtoMessage()    {}
func (*MsgSpendIbcAssetToExp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{10}
}
func (m *MsgSpendIbcAssetToExp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSpendIbcAssetToExp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSpendIbcAssetToExp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSpendIbcAssetToExp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSpendIbcAssetToExp.Merge(m, src)
}
func (m *MsgSpendIbcAssetToExp) XXX_Size() int {
	return m.Size()
}
func (m *MsgSpendIbcAssetToExp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSpendIbcAssetToExp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSpendIbcAssetToExp proto.InternalMessageInfo

func (m *MsgSpendIbcAssetToExp) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSpendIbcAssetToExp) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgSpendIbcAssetToExp) GetTimeoutHeight() types1.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types1.Height{}
}

func (m *MsgSpendIbcAssetToExp) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

type MsgSpendIbcAssetToExpResponse struct {
}

func (m *MsgSpendIbcAssetToExpResponse) Reset()         { *m = MsgSpendIbcAssetToExpResponse{} }
func (m *MsgSpendIbcAssetToExpResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSpendIbcAssetToExpResponse) ProtoMessage()    {}
func (*MsgSpendIbcAssetToExpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{11}
}
func (m *MsgSpendIbcAssetToExpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSpendIbcAssetToExpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSpendIbcAssetToExpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSpendIbcAssetToExpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSpendIbcAssetToExpResponse.Merge(m, src)
}
func (m *MsgSpendIbcAssetToExpResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSpendIbcAssetToExpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSpendIbcAssetToExpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSpendIbcAssetToExpResponse proto.InternalMessageInfo

type MsgAdjustDaoTokenPrice struct {
	// from_address defines the address who want adjust dao_token_price.
	FromAddress   string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	DaoTokenPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=dao_token_price,json=daoTokenPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dao_token_price"`
}

func (m *MsgAdjustDaoTokenPrice) Reset()         { *m = MsgAdjustDaoTokenPrice{} }
func (m *MsgAdjustDaoTokenPrice) String() string { return proto.CompactTextString(m) }
func (*MsgAdjustDaoTokenPrice) ProtoMessage()    {}
func (*MsgAdjustDaoTokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{12}
}
func (m *MsgAdjustDaoTokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAdjustDaoTokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAdjustDaoTokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAdjustDaoTokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAdjustDaoTokenPrice.Merge(m, src)
}
func (m *MsgAdjustDaoTokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgAdjustDaoTokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAdjustDaoTokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAdjustDaoTokenPrice proto.InternalMessageInfo

func (m *MsgAdjustDaoTokenPrice) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgAdjustDaoTokenPriceResponse struct {
}

func (m *MsgAdjustDaoTokenPriceResponse) Reset()         { *m = MsgAdjustDaoTokenPriceResponse{} }
func (m *MsgAdjustDaoTokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAdjustDaoTokenPriceResponse) ProtoMessage()    {}
func (*MsgAdjustDaoTokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{13}
}
func (m *MsgAdjustDaoTokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAdjustDaoTokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAdjustDaoTokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAdjustDaoTokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAdjustDaoTokenPriceResponse.Merge(m, src)
}
func (m *MsgAdjustDaoTokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAdjustDaoTokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAdjustDaoTokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAdjustDaoTokenPriceResponse proto.InternalMessageInfo

type MsgSendCoinsFromModuleToDAO struct {
	ToAddress string                                   `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgSendCoinsFromModuleToDAO) Reset()         { *m = MsgSendCoinsFromModuleToDAO{} }
func (m *MsgSendCoinsFromModuleToDAO) String() string { return proto.CompactTextString(m) }
func (*MsgSendCoinsFromModuleToDAO) ProtoMessage()    {}
func (*MsgSendCoinsFromModuleToDAO) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{14}
}
func (m *MsgSendCoinsFromModuleToDAO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCoinsFromModuleToDAO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCoinsFromModuleToDAO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCoinsFromModuleToDAO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCoinsFromModuleToDAO.Merge(m, src)
}
func (m *MsgSendCoinsFromModuleToDAO) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCoinsFromModuleToDAO) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCoinsFromModuleToDAO.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCoinsFromModuleToDAO proto.InternalMessageInfo

func (m *MsgSendCoinsFromModuleToDAO) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgSendCoinsFromModuleToDAO) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type MsgSendCoinsFromModuleToDAOResponse struct {
}

func (m *MsgSendCoinsFromModuleToDAOResponse) Reset()         { *m = MsgSendCoinsFromModuleToDAOResponse{} }
func (m *MsgSendCoinsFromModuleToDAOResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendCoinsFromModuleToDAOResponse) ProtoMessage()    {}
func (*MsgSendCoinsFromModuleToDAOResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea0f2c4d268ca6db, []int{15}
}
func (m *MsgSendCoinsFromModuleToDAOResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCoinsFromModuleToDAOResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCoinsFromModuleToDAOResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCoinsFromModuleToDAOResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCoinsFromModuleToDAOResponse.Merge(m, src)
}
func (m *MsgSendCoinsFromModuleToDAOResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCoinsFromModuleToDAOResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCoinsFromModuleToDAOResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCoinsFromModuleToDAOResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMintAndAllocateExp)(nil), "craft.exp.v1beta1.MsgMintAndAllocateExp")
	proto.RegisterType((*MsgMintAndAllocateExpResponse)(nil), "craft.exp.v1beta1.MsgMintAndAllocateExpResponse")
	proto.RegisterType((*MsgBurnAndRemoveMember)(nil), "craft.exp.v1beta1.MsgBurnAndRemoveMember")
	proto.RegisterType((*MsgBurnAndRemoveMemberResponse)(nil), "craft.exp.v1beta1.MsgBurnAndRemoveMemberResponse")
	proto.RegisterType((*MsgJoinDaoByNonIbcAsset)(nil), "craft.exp.v1beta1.MsgJoinDaoByNonIbcAsset")
	proto.RegisterType((*MsgJoinDaoByNonIbcAssetResponse)(nil), "craft.exp.v1beta1.MsgJoinDaoByNonIbcAssetResponse")
	proto.RegisterType((*MsgJoinDaoByIbcAsset)(nil), "craft.exp.v1beta1.MsgJoinDaoByIbcAsset")
	proto.RegisterType((*MsgJoinDaoByIbcAssetResponse)(nil), "craft.exp.v1beta1.MsgJoinDaoByIbcAssetResponse")
	proto.RegisterType((*MsgFundExpPool)(nil), "craft.exp.v1beta1.MsgFundExpPool")
	proto.RegisterType((*MsgFundExpPoolResponse)(nil), "craft.exp.v1beta1.MsgFundExpPoolResponse")
	proto.RegisterType((*MsgSpendIbcAssetToExp)(nil), "craft.exp.v1beta1.MsgSpendIbcAssetToExp")
	proto.RegisterType((*MsgSpendIbcAssetToExpResponse)(nil), "craft.exp.v1beta1.MsgSpendIbcAssetToExpResponse")
	proto.RegisterType((*MsgAdjustDaoTokenPrice)(nil), "craft.exp.v1beta1.MsgAdjustDaoTokenPrice")
	proto.RegisterType((*MsgAdjustDaoTokenPriceResponse)(nil), "craft.exp.v1beta1.MsgAdjustDaoTokenPriceResponse")
	proto.RegisterType((*MsgSendCoinsFromModuleToDAO)(nil), "craft.exp.v1beta1.MsgSendCoinsFromModuleToDAO")
	proto.RegisterType((*MsgSendCoinsFromModuleToDAOResponse)(nil), "craft.exp.v1beta1.MsgSendCoinsFromModuleToDAOResponse")
}

func init() { proto.RegisterFile("craft/exp/v1beta1/tx.proto", fileDescriptor_ea0f2c4d268ca6db) }

var fileDescriptor_ea0f2c4d268ca6db = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0x93, 0x2a, 0x34, 0x6f, 0x69, 0x20, 0x56, 0x5a, 0x36, 0xa6, 0xb1, 0x53, 0xa3, 0xc2,
	0xb6, 0x12, 0x76, 0x37, 0x48, 0x1c, 0xb8, 0xad, 0x49, 0x03, 0x41, 0x5a, 0xa8, 0x96, 0x08, 0x24,
	0x38, 0x2c, 0x5e, 0x7b, 0xea, 0xb8, 0x5d, 0xcf, 0x33, 0x9e, 0xd9, 0x95, 0xf7, 0x5f, 0x20, 0xb8,
	0x70, 0x85, 0x03, 0x87, 0xfe, 0x01, 0xfe, 0x42, 0x0f, 0x1c, 0x7a, 0x44, 0x1c, 0x52, 0x94, 0xfc,
	0x83, 0xfe, 0x02, 0x34, 0x63, 0x7b, 0x48, 0xb2, 0xde, 0xd6, 0x95, 0x00, 0x71, 0xb2, 0x3d, 0xf3,
	0xbd, 0xf7, 0xbe, 0xf7, 0xe6, 0x7d, 0x6f, 0x0c, 0x46, 0x90, 0xf9, 0xf7, 0xb9, 0x4b, 0xf2, 0xd4,
	0x9d, 0x76, 0x47, 0x84, 0xfb, 0x5d, 0x97, 0xe7, 0x4e, 0x9a, 0x21, 0x47, 0x7d, 0x43, 0xee, 0x39,
	0x24, 0x4f, 0x9d, 0x72, 0xcf, 0xd8, 0x8c, 0x30, 0x42, 0xb9, 0xeb, 0x8a, 0xb7, 0x02, 0x68, 0x98,
	0x01, 0xb2, 0x04, 0x99, 0x3b, 0xf2, 0x19, 0x51, 0x6e, 0x02, 0x8c, 0x69, 0xb9, 0xbf, 0x55, 0xec,
	0x0f, 0x0b, 0xc3, 0xe2, 0xa3, 0xdc, 0xb2, 0xe2, 0x51, 0xe0, 0x06, 0x98, 0x11, 0x37, 0x18, 0xc7,
	0x84, 0x72, 0x77, 0xda, 0x2d, 0xdf, 0x0a, 0x80, 0xfd, 0xab, 0x06, 0x57, 0xfb, 0x2c, 0xea, 0xc7,
	0x94, 0xf7, 0x68, 0xd8, 0x1b, 0x8f, 0x31, 0xf0, 0x39, 0xb9, 0x9b, 0xa7, 0x7a, 0x00, 0xab, 0x7e,
	0x82, 0x13, 0xca, 0xdb, 0xda, 0xce, 0x4a, 0xa7, 0xb5, 0xbb, 0xe5, 0x94, 0x9e, 0x05, 0x8d, 0x8a,
	0xb1, 0xf3, 0x21, 0xc6, 0xd4, 0xbb, 0xf3, 0xf8, 0xd8, 0x5a, 0x7a, 0xf4, 0xd4, 0xea, 0x44, 0x31,
	0x3f, 0x9a, 0x8c, 0x9c, 0x00, 0x93, 0x92, 0x46, 0xf9, 0x78, 0x97, 0x85, 0x0f, 0x5d, 0x3e, 0x4b,
	0x09, 0x93, 0x06, 0x6c, 0x50, 0xba, 0xd6, 0x6f, 0xc0, 0xab, 0xf7, 0x33, 0x4c, 0x86, 0x7e, 0x18,
	0x66, 0x84, 0xb1, 0xf6, 0xf2, 0x8e, 0xd6, 0x59, 0x1b, 0xb4, 0xc4, 0x5a, 0xaf, 0x58, 0xd2, 0xaf,
	0xc1, 0x6a, 0x42, 0x92, 0x11, 0xc9, 0xda, 0x2b, 0x72, 0xb3, 0xfc, 0xb2, 0x2d, 0xd8, 0xae, 0x25,
	0x3e, 0x20, 0x2c, 0x45, 0xca, 0x88, 0xfd, 0x25, 0x5c, 0xeb, 0xb3, 0xc8, 0x9b, 0x64, 0xb4, 0x47,
	0xc3, 0x01, 0x49, 0x70, 0x4a, 0xfa, 0xd2, 0x74, 0x2e, 0xaa, 0x36, 0x1f, 0xd5, 0x80, 0xcb, 0x09,
	0xe1, 0x7e, 0xe8, 0x73, 0xbf, 0x24, 0xa5, 0xbe, 0xed, 0x1d, 0x30, 0xeb, 0x1d, 0xab, 0xd0, 0xbf,
	0x68, 0xf0, 0x46, 0x9f, 0x45, 0x9f, 0x60, 0x4c, 0xf7, 0x7c, 0xf4, 0x66, 0x9f, 0x22, 0x3d, 0x18,
	0x05, 0x3d, 0xc6, 0x88, 0x4c, 0xf9, 0x01, 0xc6, 0xf4, 0x62, 0x70, 0xb1, 0x56, 0x05, 0xb7, 0xa0,
	0x15, 0xe1, 0xf4, 0x42, 0x51, 0x20, 0xc2, 0x69, 0x05, 0xf8, 0x08, 0xd6, 0x12, 0x3f, 0x1f, 0x72,
	0x7c, 0x48, 0xa8, 0x2c, 0xcb, 0x8a, 0x77, 0xfb, 0xd1, 0x53, 0xeb, 0xed, 0x06, 0xf5, 0x3f, 0xa0,
	0x7c, 0x70, 0x39, 0xf1, 0xf3, 0x43, 0x61, 0x6b, 0xdf, 0x00, 0x6b, 0x01, 0x4f, 0x95, 0xcb, 0xcf,
	0x1a, 0x6c, 0x9e, 0xc5, 0xfc, 0xa3, 0x89, 0xec, 0xab, 0x26, 0x93, 0x87, 0xeb, 0x39, 0xa2, 0x93,
	0xfe, 0x38, 0x6e, 0x94, 0xc9, 0x1e, 0x09, 0xaa, 0x3e, 0xb2, 0x4d, 0xb8, 0x5e, 0xc7, 0x51, 0x25,
	0xf1, 0xa3, 0x06, 0xeb, 0x7d, 0x16, 0xed, 0x4f, 0x68, 0x78, 0x37, 0x4f, 0xef, 0x21, 0x8e, 0x9b,
	0x34, 0xc1, 0xdf, 0x12, 0x58, 0xfe, 0xd7, 0x24, 0x60, 0xb7, 0x65, 0x9b, 0x9e, 0x61, 0xa6, 0x48,
	0xff, 0xb6, 0x2c, 0xb5, 0xf9, 0x79, 0x4a, 0x68, 0x58, 0x65, 0x74, 0x88, 0x42, 0x9b, 0xff, 0x13,
	0xee, 0xfa, 0x37, 0xb0, 0xce, 0xe3, 0x84, 0xe0, 0x84, 0x0f, 0x8f, 0x48, 0x1c, 0x1d, 0x15, 0xc7,
	0xd8, 0xda, 0x35, 0x9c, 0x78, 0x14, 0x38, 0x62, 0xee, 0x38, 0xe5, 0xb4, 0x99, 0x76, 0x9d, 0x8f,
	0x25, 0xc2, 0xdb, 0x16, 0xd1, 0x9e, 0x1d, 0x5b, 0x57, 0x67, 0x7e, 0x32, 0xfe, 0xc0, 0x3e, 0x6f,
	0x6f, 0x0f, 0xae, 0x94, 0x0b, 0x05, 0x5a, 0x3f, 0x80, 0x8d, 0x0a, 0x21, 0x9e, 0x8c, 0xfb, 0x49,
	0xda, 0xbe, 0xb4, 0xa3, 0x75, 0x2e, 0x79, 0xd7, 0x9f, 0x1d, 0x5b, 0xed, 0xf3, 0x4e, 0x14, 0xc4,
	0x1e, 0xbc, 0x5e, 0xae, 0x1d, 0xaa, 0xa5, 0x62, 0x60, 0xcc, 0x57, 0x53, 0xd5, 0xfb, 0x07, 0x4d,
	0x1e, 0x45, 0x2f, 0x7c, 0x30, 0x61, 0x7c, 0xcf, 0x47, 0x29, 0x91, 0x7b, 0x59, 0x1c, 0x90, 0x26,
	0x05, 0xff, 0x02, 0x5e, 0x0b, 0x7d, 0x2c, 0x34, 0x39, 0x4c, 0x85, 0x55, 0xd1, 0xef, 0x2f, 0xdd,
	0xd3, 0x57, 0xc2, 0xb3, 0xa1, 0xcb, 0x69, 0x53, 0x43, 0x4a, 0xf1, 0xfe, 0x49, 0x83, 0x37, 0x45,
	0x66, 0x84, 0x86, 0xf2, 0x78, 0xf6, 0x33, 0x4c, 0xfa, 0x18, 0x4e, 0xc6, 0xe4, 0x10, 0xf7, 0x7a,
	0x9f, 0xe9, 0xdb, 0x00, 0x1c, 0x2f, 0x50, 0x5f, 0xe3, 0xf8, 0x9f, 0x76, 0xf9, 0x4d, 0x78, 0xeb,
	0x39, 0x14, 0xab, 0x54, 0x76, 0xbf, 0x7f, 0x05, 0x56, 0xfa, 0x2c, 0xd2, 0x53, 0xd0, 0x6b, 0xae,
	0xa4, 0x8e, 0x33, 0x77, 0x65, 0x3a, 0xb5, 0x77, 0x80, 0x71, 0xa7, 0x29, 0xb2, 0x8a, 0xac, 0xcf,
	0x60, 0x6b, 0x40, 0xbe, 0x9d, 0x10, 0xc6, 0xc5, 0x60, 0x17, 0x24, 0x7b, 0x42, 0x91, 0xb1, 0xa8,
	0xb9, 0x7e, 0xab, 0xde, 0x5d, 0xcd, 0x15, 0x60, 0x74, 0x1b, 0x43, 0x55, 0xe8, 0x29, 0x6c, 0xd6,
	0xde, 0x14, 0xb7, 0xeb, 0x5d, 0xd5, 0x61, 0x8d, 0xdd, 0xe6, 0x58, 0x15, 0x37, 0x81, 0x8d, 0xf9,
	0xa9, 0xfe, 0xce, 0x0b, 0x1c, 0xa9, 0x88, 0x6e, 0x43, 0xa0, 0x0a, 0xf7, 0x35, 0xb4, 0xce, 0xcd,
	0xdf, 0x7a, 0xfb, 0x33, 0x10, 0xe3, 0xd6, 0x0b, 0x21, 0xca, 0x79, 0x0a, 0x7a, 0xcd, 0x9c, 0x5c,
	0xd0, 0x30, 0xf3, 0xc8, 0x45, 0x0d, 0xb3, 0x78, 0x5a, 0xe8, 0x14, 0xd6, 0x95, 0x28, 0x8b, 0x21,
	0xb1, 0x80, 0x6e, 0x8d, 0x74, 0x17, 0x75, 0xc9, 0x73, 0x54, 0xae, 0xe7, 0xb0, 0xae, 0xe4, 0xe3,
	0xcd, 0x84, 0xae, 0x9d, 0x05, 0x9c, 0x17, 0x88, 0xcc, 0x78, 0xff, 0xe5, 0xf0, 0x55, 0x64, 0xef,
	0xe6, 0xe3, 0x13, 0x53, 0x7b, 0x72, 0x62, 0x6a, 0x7f, 0x9e, 0x98, 0xda, 0x77, 0xa7, 0xe6, 0xd2,
	0x93, 0x53, 0x73, 0xe9, 0xf7, 0x53, 0x73, 0xe9, 0xab, 0x56, 0x2e, 0x7f, 0x6d, 0xa5, 0xe0, 0x47,
	0xab, 0xf2, 0x8f, 0xf2, 0xbd, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x4f, 0xff, 0x48, 0xf4,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	MintAndAllocateExp(ctx context.Context, in *MsgMintAndAllocateExp, opts ...grpc.CallOption) (*MsgMintAndAllocateExpResponse, error)
	RequestBurnCoinAndExitDao(ctx context.Context, in *MsgBurnAndRemoveMember, opts ...grpc.CallOption) (*MsgBurnAndRemoveMemberResponse, error)
	JoinDaoByNonIbcAsset(ctx context.Context, in *MsgJoinDaoByNonIbcAsset, opts ...grpc.CallOption) (*MsgJoinDaoByNonIbcAssetResponse, error)
	JoinDaoByIbcAsset(ctx context.Context, in *MsgJoinDaoByIbcAsset, opts ...grpc.CallOption) (*MsgJoinDaoByIbcAssetResponse, error)
	FundExpPool(ctx context.Context, in *MsgFundExpPool, opts ...grpc.CallOption) (*MsgFundExpPoolResponse, error)
	SpendIbcAssetToExp(ctx context.Context, in *MsgSpendIbcAssetToExp, opts ...grpc.CallOption) (*MsgSpendIbcAssetToExpResponse, error)
	AdjustDaoPrice(ctx context.Context, in *MsgAdjustDaoTokenPrice, opts ...grpc.CallOption) (*MsgAdjustDaoTokenPriceResponse, error)
	SendCoinsByDAO(ctx context.Context, in *MsgSendCoinsFromModuleToDAO, opts ...grpc.CallOption) (*MsgSendCoinsFromModuleToDAOResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MintAndAllocateExp(ctx context.Context, in *MsgMintAndAllocateExp, opts ...grpc.CallOption) (*MsgMintAndAllocateExpResponse, error) {
	out := new(MsgMintAndAllocateExpResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/MintAndAllocateExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBurnCoinAndExitDao(ctx context.Context, in *MsgBurnAndRemoveMember, opts ...grpc.CallOption) (*MsgBurnAndRemoveMemberResponse, error) {
	out := new(MsgBurnAndRemoveMemberResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/RequestBurnCoinAndExitDao", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinDaoByNonIbcAsset(ctx context.Context, in *MsgJoinDaoByNonIbcAsset, opts ...grpc.CallOption) (*MsgJoinDaoByNonIbcAssetResponse, error) {
	out := new(MsgJoinDaoByNonIbcAssetResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/JoinDaoByNonIbcAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinDaoByIbcAsset(ctx context.Context, in *MsgJoinDaoByIbcAsset, opts ...grpc.CallOption) (*MsgJoinDaoByIbcAssetResponse, error) {
	out := new(MsgJoinDaoByIbcAssetResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/JoinDaoByIbcAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FundExpPool(ctx context.Context, in *MsgFundExpPool, opts ...grpc.CallOption) (*MsgFundExpPoolResponse, error) {
	out := new(MsgFundExpPoolResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/FundExpPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SpendIbcAssetToExp(ctx context.Context, in *MsgSpendIbcAssetToExp, opts ...grpc.CallOption) (*MsgSpendIbcAssetToExpResponse, error) {
	out := new(MsgSpendIbcAssetToExpResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/SpendIbcAssetToExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AdjustDaoPrice(ctx context.Context, in *MsgAdjustDaoTokenPrice, opts ...grpc.CallOption) (*MsgAdjustDaoTokenPriceResponse, error) {
	out := new(MsgAdjustDaoTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/AdjustDaoPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendCoinsByDAO(ctx context.Context, in *MsgSendCoinsFromModuleToDAO, opts ...grpc.CallOption) (*MsgSendCoinsFromModuleToDAOResponse, error) {
	out := new(MsgSendCoinsFromModuleToDAOResponse)
	err := c.cc.Invoke(ctx, "/craft.exp.v1beta1.Msg/SendCoinsByDAO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	MintAndAllocateExp(context.Context, *MsgMintAndAllocateExp) (*MsgMintAndAllocateExpResponse, error)
	RequestBurnCoinAndExitDao(context.Context, *MsgBurnAndRemoveMember) (*MsgBurnAndRemoveMemberResponse, error)
	JoinDaoByNonIbcAsset(context.Context, *MsgJoinDaoByNonIbcAsset) (*MsgJoinDaoByNonIbcAssetResponse, error)
	JoinDaoByIbcAsset(context.Context, *MsgJoinDaoByIbcAsset) (*MsgJoinDaoByIbcAssetResponse, error)
	FundExpPool(context.Context, *MsgFundExpPool) (*MsgFundExpPoolResponse, error)
	SpendIbcAssetToExp(context.Context, *MsgSpendIbcAssetToExp) (*MsgSpendIbcAssetToExpResponse, error)
	AdjustDaoPrice(context.Context, *MsgAdjustDaoTokenPrice) (*MsgAdjustDaoTokenPriceResponse, error)
	SendCoinsByDAO(context.Context, *MsgSendCoinsFromModuleToDAO) (*MsgSendCoinsFromModuleToDAOResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MintAndAllocateExp(ctx context.Context, req *MsgMintAndAllocateExp) (*MsgMintAndAllocateExpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintAndAllocateExp not implemented")
}
func (*UnimplementedMsgServer) RequestBurnCoinAndExitDao(ctx context.Context, req *MsgBurnAndRemoveMember) (*MsgBurnAndRemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBurnCoinAndExitDao not implemented")
}
func (*UnimplementedMsgServer) JoinDaoByNonIbcAsset(ctx context.Context, req *MsgJoinDaoByNonIbcAsset) (*MsgJoinDaoByNonIbcAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDaoByNonIbcAsset not implemented")
}
func (*UnimplementedMsgServer) JoinDaoByIbcAsset(ctx context.Context, req *MsgJoinDaoByIbcAsset) (*MsgJoinDaoByIbcAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDaoByIbcAsset not implemented")
}
func (*UnimplementedMsgServer) FundExpPool(ctx context.Context, req *MsgFundExpPool) (*MsgFundExpPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundExpPool not implemented")
}
func (*UnimplementedMsgServer) SpendIbcAssetToExp(ctx context.Context, req *MsgSpendIbcAssetToExp) (*MsgSpendIbcAssetToExpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendIbcAssetToExp not implemented")
}
func (*UnimplementedMsgServer) AdjustDaoPrice(ctx context.Context, req *MsgAdjustDaoTokenPrice) (*MsgAdjustDaoTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustDaoPrice not implemented")
}
func (*UnimplementedMsgServer) SendCoinsByDAO(ctx context.Context, req *MsgSendCoinsFromModuleToDAO) (*MsgSendCoinsFromModuleToDAOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoinsByDAO not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MintAndAllocateExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintAndAllocateExp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintAndAllocateExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/MintAndAllocateExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintAndAllocateExp(ctx, req.(*MsgMintAndAllocateExp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBurnCoinAndExitDao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnAndRemoveMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBurnCoinAndExitDao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/RequestBurnCoinAndExitDao",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBurnCoinAndExitDao(ctx, req.(*MsgBurnAndRemoveMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinDaoByNonIbcAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinDaoByNonIbcAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinDaoByNonIbcAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/JoinDaoByNonIbcAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinDaoByNonIbcAsset(ctx, req.(*MsgJoinDaoByNonIbcAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinDaoByIbcAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinDaoByIbcAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinDaoByIbcAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/JoinDaoByIbcAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinDaoByIbcAsset(ctx, req.(*MsgJoinDaoByIbcAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FundExpPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFundExpPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FundExpPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/FundExpPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FundExpPool(ctx, req.(*MsgFundExpPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SpendIbcAssetToExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSpendIbcAssetToExp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SpendIbcAssetToExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/SpendIbcAssetToExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SpendIbcAssetToExp(ctx, req.(*MsgSpendIbcAssetToExp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AdjustDaoPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAdjustDaoTokenPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AdjustDaoPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/AdjustDaoPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AdjustDaoPrice(ctx, req.(*MsgAdjustDaoTokenPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendCoinsByDAO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendCoinsFromModuleToDAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendCoinsByDAO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/craft.exp.v1beta1.Msg/SendCoinsByDAO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendCoinsByDAO(ctx, req.(*MsgSendCoinsFromModuleToDAO))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "craft.exp.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintAndAllocateExp",
			Handler:    _Msg_MintAndAllocateExp_Handler,
		},
		{
			MethodName: "RequestBurnCoinAndExitDao",
			Handler:    _Msg_RequestBurnCoinAndExitDao_Handler,
		},
		{
			MethodName: "JoinDaoByNonIbcAsset",
			Handler:    _Msg_JoinDaoByNonIbcAsset_Handler,
		},
		{
			MethodName: "JoinDaoByIbcAsset",
			Handler:    _Msg_JoinDaoByIbcAsset_Handler,
		},
		{
			MethodName: "FundExpPool",
			Handler:    _Msg_FundExpPool_Handler,
		},
		{
			MethodName: "SpendIbcAssetToExp",
			Handler:    _Msg_SpendIbcAssetToExp_Handler,
		},
		{
			MethodName: "AdjustDaoPrice",
			Handler:    _Msg_AdjustDaoPrice_Handler,
		},
		{
			MethodName: "SendCoinsByDAO",
			Handler:    _Msg_SendCoinsByDAO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "craft/exp/v1beta1/tx.proto",
}

func (m *MsgMintAndAllocateExp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintAndAllocateExp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintAndAllocateExp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Member) > 0 {
		i -= len(m.Member)
		copy(dAtA[i:], m.Member)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Member)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintAndAllocateExpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintAndAllocateExpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintAndAllocateExpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnAndRemoveMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnAndRemoveMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnAndRemoveMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnAndRemoveMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnAndRemoveMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnAndRemoveMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinDaoByNonIbcAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDaoByNonIbcAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDaoByNonIbcAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxToken != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxToken))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GovAddress) > 0 {
		i -= len(m.GovAddress)
		copy(dAtA[i:], m.GovAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GovAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JoinAddress) > 0 {
		i -= len(m.JoinAddress)
		copy(dAtA[i:], m.JoinAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JoinAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinDaoByNonIbcAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDaoByNonIbcAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDaoByNonIbcAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinDaoByIbcAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDaoByIbcAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDaoByIbcAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.GovAddress) > 0 {
		i -= len(m.GovAddress)
		copy(dAtA[i:], m.GovAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GovAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JoinAddress) > 0 {
		i -= len(m.JoinAddress)
		copy(dAtA[i:], m.JoinAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JoinAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinDaoByIbcAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDaoByIbcAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDaoByIbcAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFundExpPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundExpPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundExpPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundExpPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundExpPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundExpPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSpendIbcAssetToExp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSpendIbcAssetToExp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSpendIbcAssetToExp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSpendIbcAssetToExpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSpendIbcAssetToExpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSpendIbcAssetToExpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAdjustDaoTokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAdjustDaoTokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAdjustDaoTokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DaoTokenPrice.Size()
		i -= size
		if _, err := m.DaoTokenPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAdjustDaoTokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAdjustDaoTokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAdjustDaoTokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendCoinsFromModuleToDAO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCoinsFromModuleToDAO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCoinsFromModuleToDAO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendCoinsFromModuleToDAOResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCoinsFromModuleToDAOResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCoinsFromModuleToDAOResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMintAndAllocateExp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintAndAllocateExpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnAndRemoveMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnAndRemoveMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinDaoByNonIbcAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JoinAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GovAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxToken != 0 {
		n += 1 + sovTx(uint64(m.MaxToken))
	}
	return n
}

func (m *MsgJoinDaoByNonIbcAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinDaoByIbcAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JoinAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GovAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgJoinDaoByIbcAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFundExpPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgFundExpPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSpendIbcAssetToExp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *MsgSpendIbcAssetToExpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAdjustDaoTokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.DaoTokenPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAdjustDaoTokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendCoinsFromModuleToDAO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSendCoinsFromModuleToDAOResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMintAndAllocateExp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintAndAllocateExp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintAndAllocateExp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintAndAllocateExpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintAndAllocateExpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintAndAllocateExpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnAndRemoveMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnAndRemoveMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnAndRemoveMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnAndRemoveMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnAndRemoveMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnAndRemoveMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDaoByNonIbcAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDaoByNonIbcAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDaoByNonIbcAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GovAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxToken", wireType)
			}
			m.MaxToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxToken |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDaoByNonIbcAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDaoByNonIbcAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDaoByNonIbcAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDaoByIbcAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDaoByIbcAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDaoByIbcAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GovAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDaoByIbcAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDaoByIbcAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDaoByIbcAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundExpPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundExpPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundExpPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundExpPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundExpPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundExpPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSpendIbcAssetToExp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSpendIbcAssetToExp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSpendIbcAssetToExp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSpendIbcAssetToExpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSpendIbcAssetToExpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSpendIbcAssetToExpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAdjustDaoTokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAdjustDaoTokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAdjustDaoTokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoTokenPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoTokenPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAdjustDaoTokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAdjustDaoTokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAdjustDaoTokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCoinsFromModuleToDAO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCoinsFromModuleToDAO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCoinsFromModuleToDAO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCoinsFromModuleToDAOResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCoinsFromModuleToDAOResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCoinsFromModuleToDAOResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
